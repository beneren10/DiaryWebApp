trigger:
  branches:
    include:
      - main

variables:
  dockerHubService: 'docker-hub-service-connection'
  dockerHubUser: 'beneren10'
  azureServiceConnection: 'AzureServiceConnection'  
  imageTag: '$(Build.BuildId)'

pool:
  vmImage: 'ubuntu-latest'

stages:

- stage: Infrastructure
  displayName: Provision AKS
  jobs:
    - job: Terraform
      steps:
        # Install Terraform CLI
        - script: |
            sudo apt-get update && sudo apt-get install -y wget unzip
            wget https://releases.hashicorp.com/terraform/1.5.6/terraform_1.5.6_linux_amd64.zip
            unzip terraform_1.5.6_linux_amd64.zip
            sudo mv terraform /usr/local/bin/
            terraform version
          displayName: 'Install Terraform CLI'

        - task: AzureCLI@2
          inputs:
            azureSubscription: $(azureServiceConnection)
            scriptType: bash
            scriptLocation: inlineScript
            workingDirectory: infra
            inlineScript: |
              terraform init
              terraform apply -auto-approve
- stage: Build
  displayName: Build and Push Docker Images
  dependsOn: Infrastructure
  jobs:
    - job: BuildAPI
      displayName: Build API Image
      steps:
        - script: |
            echo "Docker Hub service: $(dockerHubService)"
            echo "Docker Hub user: $(dockerHubUser)"
            echo "Build sources directory: $(Build.SourcesDirectory)"
          displayName: 'Debug Variables'
        
        - task: Docker@2
          displayName: Docker Login
          inputs:
            command: login
            containerRegistry: $(dockerHubService)

        - task: Docker@2
          inputs:
            containerRegistry: $(dockerHubService)
            repository: beneren10/node-api
            command: buildAndPush
            Dockerfile: docker/Dockerfile.api
            buildContext: $(Build.SourcesDirectory)
            tags: |
              latest
              $(Build.BuildId)

    - job: BuildClient
      displayName: Build Client Image
      steps:
        - task: Docker@2
          inputs:
            containerRegistry: $(dockerHubService)
            repository: beneren10/node-client
            command: buildAndPush
            Dockerfile: docker/Dockerfile.client
            buildContext: $(Build.SourcesDirectory)
            tags: |
              latest
              $(Build.BuildId)

- stage: Deploy
  displayName: Deploy to AKS
  dependsOn: Build
  jobs:
    - job: DeployToAKS
      steps:
        - task: AzureCLI@2
          inputs:
            azureSubscription: $(azureServiceConnection)
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              echo "Getting AKS credentials..."
              az aks get-credentials --resource-group RG_CICD --name myAKSCluster --overwrite-existing

              echo "Creating postgres-secret dynamically from pipeline secrets..."
              kubectl create secret generic postgres-secret \
              --from-literal=POSTGRES_USER=$(POSTGRES_USER) \
              --from-literal=POSTGRES_PASSWORD=$(POSTGRES_PASSWORD) \
              --from-literal=POSTGRES_DB=$(POSTGRES_DB) \
              --from-literal=BCRYPT_SALT_ROUNDS=$(BCRYPT_SALT_ROUNDS) \
              --from-literal=SECRET_TOKEN=$(SECRET_TOKEN) \
              --dry-run=client -o yaml | kubectl apply -f -

              echo "Updating Kubernetes manifests..."
              sed -i "s|image:.*node-api.*|image: beneren10/node-api:$(imageTag)|g" k8s/api-deployment.yaml
              sed -i "s|image:.*node-client.*|image: beneren10/node-client:$(imageTag)|g" k8s/client-deployment.yaml

              echo "Applying Kubernetes manifests..."
              kubectl apply -f k8s/postgres-secret.yaml
              kubectl apply -f k8s/postgres-init-configmap.yaml
              kubectl apply -f k8s/postgres.yaml
              kubectl apply -f k8s/api-deployment.yaml
              kubectl apply -f k8s/client-deployment.yaml
