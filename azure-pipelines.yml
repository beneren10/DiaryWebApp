trigger:
  branches:
    include:
      - main

variables:
  dockerHubService: 'docker-hub-service-connection'
  dockerHubUser: 'beneren10'
  azureServiceConnection: 'AzureServiceConnection'  
  imageTag: '$(Build.BuildId)'

pool:
  vmImage: 'ubuntu-latest'

stages:

- stage: Infrastructure
  displayName: Provision AKS
  jobs:
    - job: Terraform
      steps:
        # Install Terraform CLI
        - script: |
            sudo apt-get update && sudo apt-get install -y wget unzip
            wget https://releases.hashicorp.com/terraform/1.5.6/terraform_1.5.6_linux_amd64.zip
            unzip terraform_1.5.6_linux_amd64.zip
            sudo mv terraform /usr/local/bin/
            terraform version
          displayName: 'Install Terraform CLI'

        - task: AzureCLI@2
          inputs:
            azureSubscription: $(azureServiceConnection)
            scriptType: bash
            scriptLocation: inlineScript
            workingDirectory: infra
            inlineScript: |
              terraform init
              terraform apply -auto-approve
- stage: Build
  displayName: Build and Push Docker Images
  dependsOn: Infrastructure
  jobs:
    - job: BuildAPI
      displayName: Build API Image with Docker cache
      steps:
        # Restore Docker build cache from previous run
        - task: Cache@2
          inputs:
            key: 'docker-api-cache | "$(Agent.OS)" | **/docker/Dockerfile.api'
            path: $(Pipeline.Workspace)/.docker-api-cache
            restoreKeys: |
              docker-api-cache | "$(Agent.OS)"

        # Docker login
        - task: Docker@2
          displayName: Docker Login
          inputs:
            command: login
            containerRegistry: $(dockerHubService)

        - script: |
            export DOCKER_BUILDKIT=0
            docker build -t $(dockerHubUser)/node-api:$(imageTag) -f docker/Dockerfile.api .
            docker tag $(dockerHubUser)/node-api:$(imageTag) $(dockerHubUser)/node-api:latest
            docker push $(dockerHubUser)/node-api:$(imageTag)
            docker push $(dockerHubUser)/node-api:latest
          displayName: 'Manual Docker Build & Push (BuildKit Off)'


        # Build and push with cache-from and cache-to
        - script: |
            docker build \
              --cache-from=type=local,src=$(Pipeline.Workspace)/.docker-api-cache \
              --cache-to=type=local,dest=$(Pipeline.Workspace)/.docker-api-cache-new,mode=max \
              -t $(dockerHubUser)/node-api:$(Build.BuildId) \
              -t $(dockerHubUser)/node-api:latest \
              -f docker/Dockerfile.api \
              $(Build.SourcesDirectory)

            docker push $(dockerHubUser)/node-api:$(Build.BuildId)
            docker push $(dockerHubUser)/node-api:latest
          displayName: Build and Push API Docker Image

        # Save Docker cache for next build
        - script: |
            rm -rf $(Pipeline.Workspace)/.docker-api-cache
            mv $(Pipeline.Workspace)/.docker-api-cache-new $(Pipeline.Workspace)/.docker-api-cache
          displayName: Save Docker Cache


    - job: BuildClient
      displayName: Build Client Image with cache
      steps:
        - task: Cache@2
          inputs:
            key: 'docker-client-cache | "$(Agent.OS)" | **/docker/Dockerfile.client'
            path: $(Pipeline.Workspace)/.docker-client-cache
            restoreKeys: |
              docker-client-cache | "$(Agent.OS)"
        - script: |
            docker build \
              --cache-from=type=local,src=$(Pipeline.Workspace)/.docker-client-cache \
              --cache-to=type=local,dest=$(Pipeline.Workspace)/.docker-client-cache-new,mode=max \
              -t $(dockerHubUser)/node-client:$(Build.BuildId) \
              -t $(dockerHubUser)/node-client:latest \
              -f docker/Dockerfile.client \
              $(Build.SourcesDirectory)

            docker push $(dockerHubUser)/node-client:$(Build.BuildId)
            docker push $(dockerHubUser)/node-client:latest
          displayName: Build and Push Client Docker Image

        # Save Docker cache for next build
        - script: |
            rm -rf $(Pipeline.Workspace)/.docker-client-cache
            mv $(Pipeline.Workspace)/.docker-client-cache-new $(Pipeline.Workspace)/.docker-client-cache
          displayName: Save Docker Cache

- stage: Deploy
  displayName: Deploy to AKS
  dependsOn: Build
  jobs:
    - job: DeployToAKS
      steps:
        - task: AzureCLI@2
          inputs:
            azureSubscription: $(azureServiceConnection)
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              echo "Getting AKS credentials..."
              az aks get-credentials --resource-group RG_CICD --name myAKSCluster --overwrite-existing

              echo "Updating Kubernetes manifests..."
              sed -i "s|image:.*node-api.*|image: beneren10/node-api:$(imageTag)|g" k8s/api-deployment.yaml
              sed -i "s|image:.*node-client.*|image: beneren10/node-client:$(imageTag)|g" k8s/client-deployment.yaml


              echo "Applying Kubernetes manifests..."
              kubectl apply -f k8s/postgres-secret.yaml
              kubectl apply -f k8s/postgres-init-configmap.yaml
              kubectl apply -f k8s/postgres.yaml
              kubectl apply -f k8s/api-deployment.yaml
              kubectl apply -f k8s/client-deployment.yaml
